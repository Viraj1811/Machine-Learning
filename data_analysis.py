# -*- coding: utf-8 -*-
"""Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JEApxEiNnx2Lbe6rS1PcwX6_fnnMk7jn
"""

import numpy as np
import pandas as pd

#load the dataset
data=pd.read_csv("/content/titanic.csv")
data.head()

data.shape

data.describe()

data.info()

data.isnull().sum()

data=data.drop(columns=['Name','Ticket'])
data.shape

data.columns

data.isnull().sum()/data.shape[0]*100

data=data.drop(columns=['Cabin'])
data.shape

data.dropna(subset=['Embarked'],axis=0,inplace=True)
data.shape

data=data.fillna(data.Age.mean())

data.isnull().sum()

!pip install kaggle

import os
os.environ['KAGGLE_CONFIG_DIR']="/content"
!kaggle datasets download stackoverflow/stack-overflow-2018-developer-survey

!unzip stack-overflow-2018-developer-survey.zip

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

schema=pd.read_csv("/content/survey_results_schema.csv")

data=pd.read_csv("/content/survey_results_public.csv")

data.shape

#count the number of the null vals in each features
#count the percentage of the null values
#draw the piechart for the num of people who finds coding as hobby
#determine the num of people contributing to open source projects
#determine the top 20 countrys from where the respones are obtain
#do other 5 analysis as per your own thinking diffrent charts and graphs

#count te number of null values in each feature
data=pd.read_csv("/content/survey_results_public.csv")
data.isnull().sum()

#percentage of null values
data.isnull().sum()/data.shape[0]*100

#determine the top 20 countrys from where the respones are obtain
if 'Country' in data.columns:
    top_countries = data['Country'].value_counts().head(20)
    print("\nTop 20 Countries by Responses:\n")
    print(top_countries)

#do other 5 analysis as per your own thinking diffrent charts and graphs
 #Count total number of rows and columns
print("Total Rows and Columns:", data.shape)

#Display first 5 rows
data.head()

# List all column names
print(data.columns.tolist())

# Data loading and initial checks: Load the survey data and schema if not already loaded.
# Perform initial checks like displaying the shape, head, and column names to ensure data is loaded correctly.
schema = pd.read_csv("/content/survey_results_schema.csv")
data = pd.read_csv("/content/survey_results_public.csv", low_memory=False)

# Display the shape of the dataframe
print("Shape of the dataframe:", data.shape)

# Display the head of the dataframe
print("\nFirst 5 rows of the dataframe:")
display(data.head())

# Display the column names
print("\nColumn names:")
print(data.columns.tolist())

df = pd.read_csv("titanic.csv")
print(df.describe())

avg_age = np.mean(df['Age'].dropna())
avg_fare = np.mean(df['Fare'])
print("Average Age:", avg_age)
print("Average Fare:", avg_fare)

class_counts = df['Pclass'].value_counts()
print("Passenger Count by Class:\n", class_counts)

survival_by_gender = df.groupby('Sex')['Survived'].mean()
print("Survival Rate by Gender:\n", survival_by_gender)

"""Here are 5 additional analyses on the Stack Overflow developer survey data:

### Analysis 1: Distribution of Formal Education Levels
Let's visualize the distribution of formal education levels among the respondents.
"""

# Count the occurrences of each formal education level
formal_education_counts = data['FormalEducation'].value_counts()

# Create a bar plot to visualize the distribution
plt.figure(figsize=(10, 6))
sns.barplot(x=formal_education_counts.index, y=formal_education_counts.values)
plt.xticks(rotation=90)
plt.xlabel('Formal Education Level')
plt.ylabel('Number of Respondents')
plt.title('Distribution of Formal Education Levels')
plt.tight_layout()
plt.show()

"""### Analysis 2: Number of Respondents by Employment Status
Let's see how many respondents are employed full-time, part-time, etc.
"""

# Count the occurrences of each employment status
employment_counts = data['Employment'].value_counts()

# Create a bar plot to visualize the distribution
plt.figure(figsize=(8, 5))
sns.barplot(x=employment_counts.index, y=employment_counts.values)
plt.xticks(rotation=45)
plt.xlabel('Employment Status')
plt.ylabel('Number of Respondents')
plt.title('Distribution of Employment Status')
plt.tight_layout()
plt.show()

"""### Analysis 3: Distribution of Developer Types
Let's analyze the different types of developers who participated in the survey. Note that a respondent can select multiple developer types.
"""

# Split the 'DevType' column and count the occurrences of each developer type
devtype_counts = data['DevType'].str.split(';', expand=True).stack().value_counts()

# Select the top 10 most frequent developer types for better visualization
top_devtypes = devtype_counts.head(10)

# Create a bar plot to visualize the distribution of the top developer types
plt.figure(figsize=(12, 6))
sns.barplot(x=top_devtypes.index, y=top_devtypes.values)
plt.xticks(rotation=90)
plt.xlabel('Developer Type')
plt.ylabel('Number of Respondents')
plt.title('Top 10 Developer Types')
plt.tight_layout()
plt.show()

"""### Analysis 4: Relationship between Hobby Coding and Open Source Contribution
Let's explore if there is a relationship between coding as a hobby and contributing to open source projects.
"""

# Create a crosstab of 'Hobby' and 'OpenSource'
hobby_opensource_crosstab = pd.crosstab(data['Hobby'], data['OpenSource'])

# Create a stacked bar plot to visualize the relationship
hobby_opensource_crosstab.plot(kind='bar', stacked=True, figsize=(8, 6))
plt.xlabel('Coding as a Hobby')
plt.ylabel('Number of Respondents')
plt.title('Open Source Contribution vs. Coding as a Hobby')
plt.xticks(rotation=0)
plt.show()

"""### Analysis 5: Distribution of Age
Let's visualize the distribution of age among the respondents.
"""

# Count the occurrences of each age group and sort the index
age_counts = data['Age'].value_counts().sort_index()

# Create a bar plot to visualize the distribution of age groups
plt.figure(figsize=(10, 6))
sns.barplot(x=age_counts.index, y=age_counts.values)
plt.xticks(rotation=45)
plt.xlabel('Age Group')
plt.ylabel('Number of Respondents')
plt.title('Distribution of Age Groups')
plt.tight_layout()
plt.show()

