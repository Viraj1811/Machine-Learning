# -*- coding: utf-8 -*-
"""Logistic Regrassion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19iub3zWNnMz5-6BXlbGvlaskbFIDAuCK
"""

import pandas as pd
dataset = pd.read_csv('/content/diabetes.csv')
dataset.head()

feature_col=['Glucose','BloodPressure','Insulin','BMI','DiabetesPedigreeFunction','Age']
x=dataset[feature_col]
y=dataset.Outcome

#Train-Test Split
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=16)

#standard scaler
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)

#build the logistic Regression model
from sklearn.linear_model import LogisticRegression

model=LogisticRegression(max_iter = 1000)

model.fit(x_train_scaled,y_train)

y_pred=model.predict(x_test_scaled)

y_pred

#efficiency or evaluation parameters
from sklearn import metrics

confusion_matrix=metrics.confusion_matrix(y_test,y_pred)

confusion_matrix

#Homework
# work over designing(mathematical) model of logistic
# Regression for Multi-Class Classification

"""Let's generate a synthetic dataset with multiple classes to demonstrate multi-class logistic regression."""

from sklearn.datasets import make_classification
X_multi, y_multi = make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=2, n_classes=3, n_clusters_per_class=2, random_state=42)

"""Now, let's split the synthetic data into training and testing sets and scale the features."""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

x_train_multi, x_test_multi, y_train_multi, y_test_multi = train_test_split(X_multi, y_multi, test_size=0.2, random_state=16)

scaler_multi = StandardScaler()
x_train_scaled_multi = scaler_multi.fit_transform(x_train_multi)
x_test_scaled_multi = scaler_multi.transform(x_test_multi)

"""Now, we can build and train a logistic regression model for multi-class classification using the scaled synthetic data."""

from sklearn.linear_model import LogisticRegression

model_multi = LogisticRegression(max_iter=1000)
model_multi.fit(x_train_scaled_multi, y_train_multi)

"""Let's make predictions on the test set and evaluate the model using the confusion matrix."""

y_pred_multi = model_multi.predict(x_test_scaled_multi)
confusion_matrix_multi = metrics.confusion_matrix(y_test_multi, y_pred_multi)

print("Confusion Matrix for Multi-Class Classification:")
display(confusion_matrix_multi)